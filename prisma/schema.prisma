generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Caracteristica {
  id          Int       @id @default(autoincrement())
  nombre      String
  opciones    Opcion[]
  plantillaId Int
  plantilla   Plantilla @relation(fields: [plantillaId], references: [id], onDelete: Cascade)
}

model Plantilla {
  id              Int              @id @default(autoincrement())
  nombre          String
  caracteristicas Caracteristica[]
  productos       Producto[]
}

model Opcion {
  id               Int            @id @default(autoincrement())
  nombre           String
  caracteristicaId Int
  caracteristica   Caracteristica @relation(fields: [caracteristicaId], references: [id], onDelete: Cascade)
}

model Usuario {
  id          Int        @id @default(autoincrement())
  email       String     @unique
  nombre      String
  contrase√±a String
  telefono    String
  fecha_nac   DateTime?
  imagen_url  String?
  direccion   Direccion?
  carrito     Carrito?
  rolId       Int
  rol         Rol        @relation(fields: [rolId], references: [id])

  pedidos   Pedido[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rol {
  id       Int       @id @default(autoincrement())
  nombre   String    @unique
  usuarios Usuario[]
}

model Direccion {
  id            Int       @id @default(autoincrement())
  usuarioId     Int       @unique
  usuario       Usuario   @relation(fields: [usuarioId], references: [id])
  localidadId   Int
  localidad     Localidad @relation(fields: [localidadId], references: [id_localidad])
  codigo_postal Int
  calle         String
  numero        Int
  piso          Int?
  departamento  String?
}

model Localidad {
  id_localidad  Int         @id @default(autoincrement())
  nombre        String
  codigo_postal Int
  direcciones   Direccion[]

  zonas LocalidadZona[]
}

model Zona {
  id_zona  Int                @id @default(autoincrement())
  nombre   String             @unique
  paquetes PaquetePublicado[]

  localidades LocalidadZona[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LocalidadZona {
  id          Int @id @default(autoincrement())
  localidadId Int
  zonaId      Int

  localidad Localidad @relation(fields: [localidadId], references: [id_localidad])
  zona      Zona      @relation(fields: [zonaId], references: [id_zona])
}

model Categoria {
  id_categoria Int           @id @default(autoincrement())
  nombre       String
  productos    Producto[]
  paquetes     PaqueteBase[]
}

model Marca {
  id_marca  Int           @id @default(autoincrement())
  nombre    String        @unique
  productos Producto[]
  paquetes  PaqueteBase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Producto {
  id_producto  Int                   @id @default(autoincrement())
  nombre       String
  descripcion  String
  precio       Float
  imagen_url   String?
  marca        Marca                 @relation(fields: [marca_id], references: [id_marca])
  marca_id     Int
  altura       Float?
  ancho        Float?
  profundidad  Float?
  peso         Float?
  stock        Int?
  plantillaId  Int? // opcional, porque no todos los productos la van a usar
  categoria_id Int
  categoria    Categoria             @relation(fields: [categoria_id], references: [id_categoria])
  paquetes     PaqueteBaseProducto[]
  imagenes     ProductoImagen[]
  carritoProductos CarritoProducto[]
  plantilla    Plantilla?            @relation(fields: [plantillaId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductoImagen {
  id         Int      @id @default(autoincrement())
  url        String
  productoId Int
  producto   Producto @relation(fields: [productoId], references: [id_producto], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model PaqueteBase {
  id_paquete_base Int       @id @default(autoincrement())
  nombre          String
  descripcion     String
  imagen_url      String?
  categoria_id    Int
  categoria       Categoria @relation(fields: [categoria_id], references: [id_categoria])

  marcaId Int?
  marca   Marca? @relation(fields: [marcaId], references: [id_marca])

  productos  PaqueteBaseProducto[]
  publicados PaquetePublicado[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaqueteBaseProducto {
  id            Int         @id @default(autoincrement())
  productoId    Int
  paqueteBaseId Int
  producto      Producto    @relation(fields: [productoId], references: [id_producto], onDelete: Cascade)
  paqueteBase   PaqueteBase @relation(fields: [paqueteBaseId], references: [id_paquete_base])
}
enum TipoPaquete {
 SINERGICO
 ENERGETICO
 POR_DEFINIR  
}

model PaquetePublicado {
  id_paquete_publicado Int                    @id @default(autoincrement())
  paqueteBaseId        Int
  paqueteBase          PaqueteBase            @relation(fields: [paqueteBaseId], references: [id_paquete_base])
  estadoId             Int
  estado               EstadoPaquetePublicado @relation(fields: [estadoId], references: [id_estado])
  zonaId               Int
  zona                 Zona                   @relation(fields: [zonaId], references: [id_zona])
  fecha_inicio         DateTime
  fecha_fin            DateTime
  cant_productos       Int?
  cant_productos_reservados Int @default(0)
  cant_usuarios_registrados Int @default(0)
  monto_total          Float?
  imagen_url           String?
  tipoPaquete          TipoPaquete @default(POR_DEFINIR)

  pedidos   Pedido[]
  pedidosPaquetePublicado PedidoPaquetePublicado[]
  carritoPaquetePublicado CarritoPaquetePublicado[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EstadoPaquetePublicado {
  id_estado Int                @id @default(autoincrement())
  nombre    String             @unique
  paquetes  PaquetePublicado[]
}

model Pedido {
  id_pedido          Int              @id @default(autoincrement())
  usuarioId          Int
  usuario            Usuario          @relation(fields: [usuarioId], references: [id])
  paquetePublicadoId Int?
  paquetePublicado   PaquetePublicado? @relation(fields: [paquetePublicadoId], references: [id_paquete_publicado])
  carritoId          Int?             
  carrito            Carrito?         @relation(fields: [carritoId], references: [id_carrito])
  estadoId           Int
  estado             EstadoPedido     @relation(fields: [estadoId], references: [id_estado])
  pedidosPaquetePublicado PedidoPaquetePublicado[]
  monto_total        Float?
  fecha              DateTime         @default(now())
}

model PedidoPaquetePublicado {
  id                 Int          @id @default(autoincrement())
  pedidoId           Int
  paquetePublicadoId Int
  pedido             Pedido       @relation(fields: [pedidoId], references: [id_pedido])
  paquetePublicado   PaquetePublicado  @relation(fields: [paquetePublicadoId], references: [id_paquete_publicado])
}

model EstadoPedido {
  id_estado Int      @id @default(autoincrement())
  nombre    String   @unique
  pedidos   Pedido[]
}

model Carrito {
  id_carrito   Int                  @id @default(autoincrement())
  usuarioId    Int                  @unique
  usuario      Usuario              @relation(fields: [usuarioId], references: [id])
  productos    CarritoProducto[]
  paquetes     CarritoPaquetePublicado[]
  pedidos      Pedido[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

model CarritoProducto {
  id_carrito_producto Int       @id @default(autoincrement())
  carritoId           Int
  productoId          Int
  cantidad            Int       @default(1)
  carrito             Carrito   @relation(fields: [carritoId], references: [id_carrito])
  producto            Producto  @relation(fields: [productoId], references: [id_producto])
}

model CarritoPaquetePublicado {
  id_carrito_paquete Int        @id @default(autoincrement())
  carritoId          Int
  paquetePublicadoId Int
  cantidad           Int        @default(1)
  carrito            Carrito    @relation(fields: [carritoId], references: [id_carrito])
  paquetePublicado   PaquetePublicado @relation(fields: [paquetePublicadoId], references: [id_paquete_publicado])
}